{"version":3,"sources":["constants/index.js","redux/reducers/character.js","redux/reducers/episode.js","redux/reducers/location.js","redux/reducers/index.js","redux/store/index.js","serviceWorker.js","App.js","index.js"],"names":["FETCH_CHARACTERS","FETCH_CHARACTERS_NUMBER","FETCH_LOCATIONS","FETCH_EPISODES","LOADING","characters","handleActions","state","action","payload","charactersNumber","isLoading","episodes","locations","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","thunk","promiseMiddleware","isLocalhost","Boolean","location","hostname","match","register","config","navigator","URL","process","href","origin","addEventListener","swUrl","fetch","headers","then","response","contentType","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","Home","lazy","App","fallback","rootComponent","ReactDOM","render","document","getElementById"],"mappings":"kKAAA,0KAAO,IAAMA,EAAmB,mBACnBC,EAA0B,0BAC1BC,EAAkB,kBAClBC,EAAiB,iBACjBC,EAAU,W,8JCDVC,EAAaC,YAAc,eACnCN,KAA0B,SAACO,EAAOC,GAAR,OAAmBA,EAAOC,WACtD,IAEUC,EAAmBJ,YAAc,eACzCL,KAAiC,SAACM,EAAOC,GAAR,OAAmBA,EAAOC,WAC7D,IAEUE,EAAYL,YAAa,eACjCF,KAAqB,SAACG,EAAOC,GAAR,OAAmBA,EAAOC,YACjD,GCVUG,EAAWN,YAAc,eACjCH,KAAwB,SAACI,EAAOC,GAAR,OAAmBA,EAAOC,WACpD,ICFUI,EAAYP,YAAc,eAClCJ,KAAyB,SAACK,EAAOC,GAAR,OAAmBA,EAAOC,WACrD,ICAYK,cAAgB,CAC3BT,aAAYK,mBAAkBE,WAAUD,YAAWE,cCDjDE,EAAmBC,OAAOC,sCAAwCC,IAE3DC,EAAQC,YAAYC,EAAU,GAAIN,EAAiBO,YAAgBC,IAAOC,OCKjFC,EAAcC,QACW,cAA7BV,OAAOW,SAASC,UAEe,UAA7BZ,OAAOW,SAASC,UAEhBZ,OAAOW,SAASC,SAASC,MACvB,2DAIC,SAASC,EAASC,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIC,IAAIC,IAAwBlB,OAAOW,SAASQ,MACpDC,SAAWpB,OAAOW,SAASS,OAIvC,OAGFpB,OAAOqB,iBAAiB,QAAQ,WAC9B,IAAMC,EAAK,UAAMJ,IAAN,sBAEPT,IAgEV,SAAiCa,EAAOP,GAEtCQ,MAAMD,EAAO,CACXE,QAAS,CAAE,iBAAkB,YAE5BC,MAAK,SAAAC,GAEJ,IAAMC,EAAcD,EAASF,QAAQI,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5Cd,UAAUe,cAAcC,MAAMP,MAAK,SAAAQ,GACjCA,EAAaC,aAAaT,MAAK,WAC7BzB,OAAOW,SAASwB,eAKpBC,EAAgBd,EAAOP,MAG1BsB,OAAM,WACLC,QAAQC,IACN,oEAvFAC,CAAwBlB,EAAOP,GAI/BC,UAAUe,cAAcC,MAAMP,MAAK,WACjCa,QAAQC,IACN,iHAMJH,EAAgBd,EAAOP,OAM/B,SAASqB,EAAgBd,EAAOP,GAC9BC,UAAUe,cACPjB,SAASQ,GACTG,MAAK,SAAAQ,GACJA,EAAaQ,cAAgB,WAC3B,IAAMC,EAAmBT,EAAaU,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBnD,QACfyB,UAAUe,cAAcc,YAI1BP,QAAQC,IACN,iHAKExB,GAAUA,EAAO+B,UACnB/B,EAAO+B,SAASb,KAMlBK,QAAQC,IAAI,sCAGRxB,GAAUA,EAAOgC,WACnBhC,EAAOgC,UAAUd,WAO5BI,OAAM,SAAAW,GACLV,QAAQU,MAAM,4CAA6CA,M,UC3F3DC,EAAOC,gBAAK,kBAAK,sDASvBnB,IAEeoB,MATH,kBACA,kBAAC,WAAD,CAAUC,SAAU,kBAAC,WAAD,OAChB,kBAACH,EAAD,QCFVI,EACF,kBAAC,IAAD,CAAUlD,MAAOA,GACb,kBAAC,EAAD,OAIRmD,IAASC,OAAOF,EAAeG,SAASC,eAAe,SAEvD1B,M","file":"static/js/main.68a13937.chunk.js","sourcesContent":["export const FETCH_CHARACTERS = \"FETCH_CHARACTERS\";\nexport const FETCH_CHARACTERS_NUMBER = \"FETCH_CHARACTERS_NUMBER\";\nexport const FETCH_LOCATIONS = \"FETCH_LOCATIONS\";\nexport const FETCH_EPISODES = \"FETCH_EPISODES\";\nexport const LOADING = \"LOADING\";\n","import { handleActions } from 'redux-actions';\nimport { FETCH_CHARACTERS, FETCH_CHARACTERS_NUMBER, LOADING } from '../../constants/index';\n\nexport const characters = handleActions({\n    [FETCH_CHARACTERS]       : (state, action) => action.payload,\n}, [])\n\nexport const charactersNumber = handleActions({\n    [FETCH_CHARACTERS_NUMBER]       : (state, action) => action.payload,\n}, [])\n\nexport const isLoading = handleActions ( {\n    [LOADING]           : (state, action) => action.payload,\n}, false );\n","import { handleActions } from 'redux-actions';\nimport { FETCH_EPISODES } from '../../constants/index';\n\nexport const episodes = handleActions({\n    [FETCH_EPISODES]       : (state, action) => action.payload,\n}, [])","import { handleActions } from 'redux-actions';\nimport { FETCH_LOCATIONS } from '../../constants/index';\n\nexport const locations = handleActions({\n    [FETCH_LOCATIONS]       : (state, action) => action.payload,\n}, [])","import { combineReducers } from 'redux';\nimport { characters, charactersNumber, isLoading } from './character';\nimport { episodes } from './episode';\nimport { locations } from './location';\n\nexport default combineReducers({\n    characters, charactersNumber, episodes, isLoading, locations\n});\n","import {createStore, compose, applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\nimport promiseMiddleware from 'redux-promise';\nimport reducers from '../../redux/reducers';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport const store = createStore(reducers, {}, composeEnhancers(applyMiddleware(thunk, promiseMiddleware)));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Suspense, lazy, Fragment } from 'react';\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport './sass/main.scss';\n\nconst Home = lazy(()=> import('./components/home/Home'));\n\nconst App = () => (\n            <Suspense fallback={<Fragment />} >\n                <Home></Home>\n            </Suspense>\n    )\n\n\nserviceWorker.register();\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {store} from './redux/store';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootComponent = (\n    <Provider store={store}>\n        <App />\n    </Provider>\n)\n\nReactDOM.render(rootComponent, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}